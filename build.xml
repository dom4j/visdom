<project default="all" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="VisDom"/>
    <property name="name" value="visdom"/>
    <property name="version" value="1.0-alpha"/>
    <property name="year" value="2001"/>

    <echo message="----------- ${Name} ${version} [${year}] ------------"/>

    <property name="build.compiler" value="classic"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="off"/>

    <property name="src.dir" value="./src/java"/>
    <property name="doc.dir" value="./src/doc"/>
    <property name="samples.dir" value="./src/samples"/>
    <property name="test.dir" value="./src/test"/>
    <property name="lib.dir" value="./lib"/>
    <property name="packages" value="org.*"/>

    <property name="build.dir" value="./build"/>
    <property name="build.src" value="./build/src"/>
    <property name="build.dest" value="./build/classes"/>
    <property name="build.doc" value="./build/doc"/>
    <property name="build.apidocs" value="./build/doc/apidocs"/>
    <property name="build.javadocs" value="./build/doc/javadoc"/>
    <property name="build.generated.src" value="./build/generated"/>

    <property name="dist.root" value="./dist"/>
    <property name="dist.dir" value="${dist.root}/tmp/${name}-${version}"/>
    <property name="dist.jar.dir" value="${dist.root}/tmp"/>
    <property name="dist.target" value="${dist.root}"/>

    <property name="web.htdocs" value="../htdocs/visdom"/>
    <property name="web.dist" value="${web.htdocs}/dist/visdom"/>
    <property name="web.ftp" value="./build/ftp/visdom"/>

    <filter token="year" value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date" value="${TODAY}"/>
    <filter token="log" value="true"/>
    <filter token="verbose" value="true"/>
  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="VisDom Build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" available targets are:"/>
    <echo message=""/>
    <echo message="   all      --> cleans then builds everything (default)"/>
    <echo message="   package  --> generates the visdom.jar file"/>
    <echo message="   compile  --> compiles the source code"/>
    <echo message="   doc      --> generates the website documentation"/>
    <echo message="   javadoc  --> generates the full JavaDoc documentation"/>
    <echo message="   clean    --> cleans up the directory"/>
    <echo message="   samples  --> compiles all the sample programs"/>
    <echo message=""/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>

    <!-- create directories -->
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.dest}"/>

    <!-- copy src files -->
    <copy todir="${build.src}">
      <fileset dir="${src.dir}" />
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the example code                                           -->
  <!-- =================================================================== -->
  <target name="prepare-samples" depends="prepare">
    <!-- create directories -->
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.dest}"/>

    <!-- copy src files -->
    <copy todir="${build.src}">
      <fileset dir="${samples.dir}" />
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare">
    <javac srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}"/>
    <copy todir="${build.dest}" overwrite="yes">
      <fileset dir="${src.dir}" includes="*.properties"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile-test" depends="compile">
    <javac srcdir="${test.dir}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"/>
    <copy  todir="${build.dest}" overwrite="yes">
      <fileset dir="${test.dir}" includes="**/*.properties"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the samples directory                                       -->
  <!-- =================================================================== -->
  <target name="samples" depends="prepare-samples">
    <javac srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the class package                                           -->
  <!-- =================================================================== -->
  <target name="package" depends="compile">
    <fixcrlf srcdir="." includes="*.bat" cr="add"/>
    <fixcrlf srcdir="." includes="*.sh" cr="remove"/>

    <jar jarfile="${build.dir}/${name}.jar"
         basedir="${build.dest}"
         includes="**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadoc" depends="prepare,doc">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${Name} Full JavaDoc"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} MetaStuff Ltd. All Rights Reserved. Hosted by &lt;p&gt; &lt;img src='http://sourceforge.net/sflogo.php?group_id=16035' width='88' height='31' border='0' alt='SourceForge Logo' /&gt;"
             stylesheetfile="${doc.dir}/style/javadoc.css">
      <link href="http://java.sun.com/products/jdk/1.3/docs/api"/>
      <link href="http://java.sun.com/xml/jaxp-docs-1.1/docs/api"/>
    </javadoc>
  </target>


  <!-- Build the documentation -->
  <target name="doc" depends="prepare">
    <mkdir    dir="${doc.dir}/images"/>
    <mkdir    dir="${build.doc}"/>
    <style    basedir="${doc.dir}" destdir="${build.doc}" style="style/style.xsl"
              includes="**/*.xml" excludes="style/**,project.xml"/>
    <copy todir="${build.doc}" overwrite="yes"> 
      <fileset dir="${doc.dir}" includes="license.txt,document.dtd"/>
    </copy>
    <copy todir="${build.doc}/images" overwrite="yes">
      <fileset dir="${doc.dir}/images"/>
    </copy>
    <copy todir="${build.doc}" overwrite="yes">
      <fileset dir="${doc.dir}" includes="*.css"/>
    </copy>
    <copy todir="${build.doc}/style" overwrite="yes">
      <fileset dir="${doc.dir}/style" includes="images/**"/>
    </copy>

    <replace file="${build.doc}/index.html" token="$$VERSION$$" value="${version}"/>
    <replace file="${build.doc}/download.html" token="$$VERSION$$" value="${version}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Creates the distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist" depends="package, doc, javadoc">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/lib"/>
    <mkdir dir="${dist.dir}/src"/>
    <mkdir dir="${dist.dir}/docs"/>
    <mkdir dir="${dist.dir}/docs/apidocs"/>

    <copy file="${build.dir}/${name}.jar" tofile="${dist.dir}/${name}.jar"/>

    <copy todir="${dist.dir}/src">
      <fileset dir="./src" includes="**/*.java,**/*.xml,**/*.xsl,**/*.properties,**/*.mf,**/*.css,**/*.gif,**/*.g"/>
    </copy>
    <copy todir="${dist.dir}/xml">
      <fileset dir="./xml" />
    </copy>
    <copy todir="${dist.dir}/lib">
      <fileset dir="./lib" />
    </copy>

    <copy todir="${dist.dir}">
      <fileset dir="." includes="build.sh, build.bat, cp.bat, run.bat, run.sh, runnojit.bat, *.xml, *.html" />
    </copy>

    <chmod perm="+x" file="${dist.dir}/run.sh"/>
    <chmod perm="+x" file="${dist.dir}/build.sh"/>

    <fixcrlf srcdir="${dist.dir}" includes="run.sh"       cr="remove"/>
    <fixcrlf srcdir="${dist.dir}" includes="run.bat"      cr="add"/>
    <fixcrlf srcdir="${dist.dir}" includes="build.sh"     cr="remove"/>
    <fixcrlf srcdir="${dist.dir}" includes="build.bat"    cr="add"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution as .zip                                   -->
  <!-- =================================================================== -->
  <target name="dist-zip" depends="dist">
    <zip zipfile="${dist.target}/${name}-daily.zip" basedir="${dist.jar.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution as .jar                                   -->
  <!-- =================================================================== -->
  <target name="dist-jar" depends="dist">
    <jar jarfile="${dist.target}/${name}-daily.jar" basedir="${dist.jar.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution with .tar.gzip                            -->
  <!-- =================================================================== -->
  <target name="dist-tgz" depends="dist">
    <tar tarfile="${dist.target}/${name}-daily.tar" basedir="${dist.jar.dir}"/>
    <gzip zipfile="${dist.target}/${name}-daily.tar.gz" src="${dist.target}/${name}-daily.tar"/>
  </target>


  <!-- =================================================================== -->
  <!-- Performs a release on the website                                   -->
  <!-- =================================================================== -->
  <target name="release" depends="clean,dist-zip,dist-tgz,dist-jar">
    <mkdir dir="${web.htdocs}"/>
    <mkdir dir="${web.dist}"/>
    <copy todir="${web.htdocs}" overwrite="yes">
      <fileset dir="${build.doc}" includes="**/*.html, **/*.css"/>
    </copy>

    <copy todir="${web.dist}" overwrite="yes">
      <fileset dir="${dist.root}" includes="*.jar, *.zip, *.gz"/>
    </copy>
  </target>



  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.root}"/>
  </target>

  <target name="distclean" depends="clean">
    <delete dir="${dist.root}"/>
    <delete file="${name}-daily.tar.gz"/>
    <delete file="${name}-daily.tar"/>
    <delete file="${name}-daily.zip"/>
  </target>

  <!-- =================================================================== -->
  <!-- Unit Testing Targets                                                -->
  <!-- =================================================================== -->
  <target name="test" depends="compile-test">
    <junit printsummary="yes" haltonfailure="yes">
      <formatter type="plain"/>

      <classpath>
        <pathelement location="${build.dest}" />
        <pathelement path="${java.class.path}" />
      </classpath>

      <batchtest fork="yes">
        <fileset dir="${test.dir}">
          <include name="**/Test*.java" />
          <exclude name="**/AllTests.java,**/Abstract*.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- =================================================================== -->
  <!-- Helper targets                                                      -->
  <!-- =================================================================== -->
  <target name="all" depends="clean,package,doc,javadoc">
  </target>

</project>

<!-- End of file -->
